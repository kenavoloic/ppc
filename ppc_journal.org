#+TITLE: Paper, scissors, rocks

* Objectif

√âvaluer les comp√©tences en TypeScript (React, NextJs et Node.js)
Cr√©ation d'une web application impl√©mentant le jeu =Paper, scissors, rocks=.
Tout joueur doit pouvoir  entrer son nom et jouer.
N√©cessit√© de cr√©er un tableau de classement qui sera sauvegard√© en base de donn√©es.

+ Pour pouvoir jouer, un joueur doit entre son nom.
+ Le tableau de classement pr√©sente 10 joueurs, il est archiv√© en base de donn√©es.
+ Le tableau pr√©sente le nom des joueurs ainsi que leurs scores.  
+ √Ä la fin de chaque tour, l'application sauvegarde le score du joueur et met √† jour la base de donn√©es.
+ Existence d'un bouton reset pour permettre √† un joueur de commencer un nouveau tour.
+ Interface graphique doit √™tre visuellement plaisante et facile √† appr√©hender.
+ La logique du jeu doit √™tre d√©velopp√©e par une API backend.  

  
* Cr√©ation du projet

** Premier jet
npx create-next-app@latest ./ --ts --use-npm
npm install prisma --save-dev
npx prisma init
npx prisma db pull (?)
npx prisma generate
npm install @nextui-org/react (?)

** Deuxi√®me jet

npx create-next-app@latest ./ --ts --use-npx
npm install drizzle-orm mysql2
npx shadcn-ui@latest init
npm install -D drizzle-kit
npm install next-auth@beta @auth/drizzle-adapter
npx auth secret
npm install zod

* Algo pierre, papier, ciseaux

** Probl√©matiques
9 cas possibles : 3 √©galit√©s et 6 victoires

pierre = 0
papier = 1
ciseaux = 2

pierre vs papier => papier
0 & 1 => 1

papier vs pierre => papier
1 & 0 => 1

pierre vs ciseaux => pierre
0 & 2 => 0

ciseaux vs pierre => pierre
2 & 0 => 0

papier vs ciseaux => ciseaux
1 & 2 => 2

ciseaux vs papier => ciseaux
2 & 1 => 2

pierre vs pierre => pierre
0 & 0 => 0
papier vs papier => papier
1 & 1 => 1
ciseaux vs ciseaux => ciseaux
2 & 2 => 2

** Algo js

#+begin_src js :tangle ztank/algo.js

//let cas = [0,1,2]
//const choix = {0:'pierre',1:'papier',2:'ciseaux'}

const regles  = (x,y) => {

    let retour;
    
    switch(true){
    case x === y:
	//√âgalit√©
	//Aucun perdant, pierre vs pierre ou papier vs papier ou ciseaux vs ciseaux
	retour = [true, true] ; 
	break;

    case x == 0 && y == 1:
	//pierre vs papier => papier gagne
	retour = [false, true];
	break;

    case x == 1 && y == 0:
	//papier vs pierre => papier gagne
	retour = [true, false];
	break;

    case x == 0 && y == 2:
	//pierre vs ciseaux => pierre gagne
	retour = [true, false];
	break;
	
    case x == 2 && y == 0:
	//ciseaux vs pierre => ciseaux gagnent
	retour = [false, true];
	break;

    case x == 1 && y == 2:
	//papier vs ciseaux => ciseaux gagnent
	retour = [false, true];
	break;
	
    case x == 2 && y == 1:
	//ciseaux vs papier => ciseaux gagnent
	retour = [true, false];
	break;

    default:
	//Aucun perdant, √©galit√©
	retour = [true, true];
    };
    
    return retour;
};

//Tests des diff√©rents cas possibles, si x et y sont des entiers
console.log("pierre vs pierre", regles(0,0));
console.log("papier vs papier", regles(1,1));
console.log("ciseaux vs ciseaux", regles(2,2));

console.log("pierre vs papier",regles(0,1));
console.log("papier vs pierre",regles(1,0));

console.log("pierre vs ciseaux",regles(0,2));
console.log("ciseaux vs pierre",regles(2,0));

console.log("papier vs ciseaux",regles(1,2));
console.log("ciseaux vs papier",regles(2,1));

console.log("inconnu vs inconnu",regles(12,21));
console.log("inconnu vs inconnu",regles(3,4));

#+end_src

#+begin_src typescript

const regles = (x: number, y:number): [boolean, boolean] => {

    let retour: [boolean, boolean];

    switch(true){
	case x === y:
	    //√âgalit√©
	    //Aucun perdant, pierre vs pierre ou papier vs papier ou ciseaux vs ciseaux
	    retour = [true, true] ; 
	    break;

	case x == 0 && y == 1:
	    //pierre vs papier => papier gagne
	    retour = [false, true];
	    break;

	case x == 1 && y == 0:
	    //papier vs pierre => papier gagne
	    retour = [true, false];
	    break;

	case x == 0 && y == 2:
	    //pierre vs ciseaux => pierre gagne
	    retour = [true, false];
	    break;
	    
	case x == 2 && y == 0:
	    //ciseaux vs pierre => ciseaux gagnent
	    retour = [false, true];
	    break;

	case x == 1 && y == 2:
	    //papier vs ciseaux => ciseaux gagnent
	    retour = [false, true];
	    break;
	    
	case x == 2 && y == 1:
	    //ciseaux vs papier => ciseaux gagnent
	    retour = [true, false];
	    break;

	default:
	    //Aucun perdant, √©galit√©
	    retour = [true, true];
    };
    
    return retour;
}


#+end_src

* Dbase : sch√©ma

** Probl√©matique
id joueur
nom joueur
prenom joueur
points joueur

2 tables, une pour les joueurs et leurs id, l'autre pour les scores
liste fictives ? 

#+begin_example
id,prenom,nom,points
1,Maxime,Lamothe,-8
2,Romain,Latterrade,29
3,Ugo,Boniface,-20
4,Sipili,Falatea,-10
5,Matis,Perchaud,12
6,Jefferson,Poirot,-10
7,Carl√º,Sadie,3
8,Ben,Tameifuna,13
9,Cyril,Cazeaux,7
10,Adam,Coleman,-17
11,Jonny,Gray,20
12,Guido,Petti,-16
13,Alexandre,Ricard,30
14,Pierre,Bochaton,13
15,Mahamadou,Diaby,17
16,Marko,Gazzotti,17
17,Pete,Samu,-11
18,Lachlan,Swinton,23
19,Tevita,Tatafu,-19
20,Bastien,Vergnes-Taillefer,22
21,Paul,Abadie,-7
22,Yann,Lesgourgues,1
23,Maxime,Lucu,13
24,Joey,Carbery,-24
25,Mateo,Garcia,29
26,Matthieu,Jalibert,17
27,Nicolas,Depoort√®re,-27
28,Rohan,Janse van Rensburg,23
29,Yoram,Moefana,-23
30,Ben,Tapuai,-23
31,Pablo,Uberti,22
32,Tani,Vili,26
33,Louis,Bielle-Biarrey,16
34,Nans,Ducuing,23
35,Damian,Penaud,7
36,Enzo,Reybier,8
37,Romain,Buros,-15
#+end_example

** Sch√©ma sql

#+begin_src sql

USE pierre_papier_ciseaux;

DROP TABLE IF EXISTS joueurs;
CREATE TABLE joueurs (
joueurId INT AUTO_INCREMENT PRIMARY KEY,
nom VARCHAR(255) NOT NULL,
prenom varchar(255) NOT NULL,
motpasse varchar(255) NOT NULL
);

DROP TABLE IF EXISTS scores;
CREATE TABLE scores (
id INT AUTO_INCREMENT PRIMARY KEY,
joueur INT   
points INT NOT NULL DEFAULT 0,
FOREIGN KEY (joueur) REFERENCES joueurs(joueurId)
);


INSERT INTO joueurs values (prenom, nom) values ("Maxime","Lamothe"),("Romain","Latterrade"),("Ugo","Boniface"),("Sipili","Falatea"),("Matis","Perchaud"),("Jefferson","Poirot"),("Carl√º","Sadie"),("Ben","Tameifuna"),("Cyril","Cazeaux"),("Adam","Coleman"),("Jonny","Gray"),("Guido","Petti"),("Alexandre","Ricard"),("Pierre","Bochaton"),("Mahamadou","Diaby"),("Marko","Gazzotti"),("Pete","Samu"),("Lachlan","Swinton"),("Tevita","Tatafu"),("Bastien","Vergnes-Taillefer"),("Paul","Abadie"),("Yann","Lesgourgues"),("Maxime","Lucu"),("Joey","Carbery"),("Mateo","Garcia"),("Matthieu","Jalibert"),("Nicolas","Depoort√®re"),("Rohan","Janse van Rensburg"),("Yoram","Moefana"),("Ben","Tapuai"),("Pablo","Uberti"),("Tani","Vili"),("Louis","Bielle-Biarrey"),("Nans","Ducuing"),("Damian","Penaud"),("Enzo","Reybier"),("Romain","Buros");

#+end_src
api :
+ existence joueur : requ√™te avec num√©ro id
+ cr√©ation joueur : id, nom, prenom, motpasse, points=0
+ mise √† jour points joueur
+ 10 meilleurs score si joueur est dans le top 10 / 9 meilleurs scores + score du joueur

** Choix de prisma pour l'orm
Il servira √©galement pour l'authentification.

** Finalement drizzle, car difficult√© d'installation de prisma
Erreur P1001 Can't reach database server at `localhost`:`3306`


** Authentification : Auth.js
N√©cessit√© d'ajouter deux tables : session et verificationToken

* Interface
** Icones
https://en.wikipedia.org/wiki/Rock_paper_scissors#/media/File:Rock-paper-scissors.svg

https://creazilla.com/media/clipart/7794817/rock-paper-scissors-lizard-spock

U+1F44D üëç
U+1F44E üëé

Ou alors couleurs pour signaler le vainqueur

Page d'accueil avec le tableau des 10 meilleurs scores
Avec √©galement un champs de connexion quien cas d'autorisation  basculera sur la page de jeu

Page de jeu 2x3 boutons pour =pierre=, =papier=, =ciseaux= : joueur et ordinateur
En plus un quatri√®me bouton indiquant la victoire ou la d√©faite

heroicons/react pour les autres icones

finalement shadcn

* Structure

** tsconfig.json

https://blog.logrocket.com/using-path-aliases-cleaner-react-typescript-imports/

Ajout de baseUrl
Ajout d'alias

** .env
Ajout des identifiants de la bdd
